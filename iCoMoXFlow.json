[{"id":"91830877.d26b18","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"d4ab7732.3517c8","type":"mqtt in","z":"91830877.d26b18","name":"iCoMoX-MQTT-In","topic":"iCOMOX/+/IN","qos":"2","datatype":"auto","broker":"d06c3515.0071e8","x":100,"y":240,"wires":[["ed442511.2272f8"]]},{"id":"8eadd70d.fdc248","type":"function","z":"91830877.d26b18","name":"iCoMox-IoT Central Reformatter","func":"//Function to return max,min and average of array\nvar arrCalc = context.get('ArrCalc');\n\n//Message data\nvar data = msg.payload[msg.payload.reportType];\nvar reportType = msg.payload.reportType;\nvar res;\n\n\n//New payload structure for IoTCentral\nmsg.payload =  {\n    \"device\": {\n        \"deviceId\":msg.topic.split('/')[1]\n    },\n    \"measurements\": {\n    },   \n    \"properties\":{\n        \"asetting\": \"off\"\n    }\n};\n\n\nswitch (reportType){\n    case \"Temp\":\n        msg.payload.measurements[\"Temp\"] = data;\n        break;\n    case \"ACC1\":\n        res  = {X:arrCalc(data.X),Y:arrCalc(data.Y),Z:arrCalc(data.Z)};\n        msg.payload.measurements = {\n            \"Acc1XMax\":res.X.max, \"Acc1XMin\":res.X.min, \"Acc1XAvg\":res.X.avg,\n            \"Acc1YMax\":res.Y.max, \"Acc1YMin\":res.Y.min, \"Acc1YAvg\":res.Y.avg,\n            \"Acc1ZMax\":res.Z.max, \"Acc1ZMin\":res.Z.min, \"Acc1ZAvg\":res.Z.avg\n        };\n        break;\n    \n    case \"ACC2\":\n        res  = {X:arrCalc(data.X),Y:arrCalc(data.Y),Z:arrCalc(data.Z)};\n        msg.payload.measurements = {\n            \"Acc2XMax\":res.X.max, \"Acc2XMin\":res.X.min, \"Acc2XAvg\":res.X.avg,\n            \"Acc2YMax\":res.Y.max, \"Acc2YMin\":res.Y.min, \"Acc2YAvg\":res.Y.avg,\n            \"Acc2ZMax\":res.Z.max, \"Acc2ZMin\":res.Z.min, \"Acc2ZAvg\":res.Z.avg\n        };\n        break;\n    \n    case \"MAG\":\n        res  = {X:arrCalc(data.X),Y:arrCalc(data.Y),Z:arrCalc(data.Z)};\n        msg.payload.measurements = {\n            \"MagXMax\":res.X.max, \"MagXMin\":res.X.min, \"MagXAvg\":res.X.avg,\n            \"MagYMax\":res.Y.max, \"MagYMin\":res.Y.min, \"MagYAvg\":res.Y.avg,\n            \"MagZMax\":res.Z.max, \"MagZMin\":res.Z.min, \"MagZAvg\":res.Z.avg\n        };\n        break;\n    \n    case \"MIC\":\n        res = arrCalc(data);\n         msg.payload.measurements = { \"MicMax\":res.max, \"MicMin\":res.min, \"MicAvg\":res.avg};\n        break;\n    default:\n        return [null];\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\ncontext.set('ArrCalc', function (arr){\n    console.log(\"arr:\"+arr.length);\n    var sum = arr[0], res = {max :arr[0],min:arr[0] };\n    \n    for (var i=1; i < arr.length ; i++){\n        sum+=arr[i];\n        res.min = Math.min(res.min, arr[i]);\n        res.max = Math.max(res.max, arr[i]);\n    }\n    res.avg = sum / arr.length;\n    \n    return res;\n}\n);","finalize":"","x":630,"y":240,"wires":[["9274c23a.83b3f","51c0a4da.4cb91c"]]},{"id":"9274c23a.83b3f","type":"debug","z":"91830877.d26b18","name":"","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":550,"y":100,"wires":[]},{"id":"51c0a4da.4cb91c","type":"azure-iotc-bridge","z":"91830877.d26b18","name":"","registrationHost":"global.azure-devices-provisioning.net","idScope":"0ne00074021","sasToken":"gTYIoPFs7raJpVV7LH1YtII9Iy1l7QPlByvQZG90x2dvVpO+367NPkXHyoPAgNmpspoqZGE/8mGA56bC0t81eA==","x":1030,"y":240,"wires":[["9274c23a.83b3f"]]},{"id":"ed442511.2272f8","type":"function","z":"91830877.d26b18","name":"iCoMoX Parser","func":"\nvar iCoMoXParser = global.get('iCoMoX');\nvar iComoxMsg = new iCoMoXParser(msg.payload);\n\nif (iComoxMsg  == null)\n    return [null];\n\nvar iCoMoxParsedMsg = iComoxMsg.objectGet();    \nif (iCoMoxParsedMsg == null)\n    return [null];\n\nmsg.payload = iCoMoxParsedMsg;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"global.set('iCoMoX', function iCoMoXParser(binaryData) {\n\tconst VERSION = \"0.0.1\";\n\t\n\tconst MESSAGE_TYPE = {\n\t  REPORT:0xFF\n\t  \n\t};\n\n\tconst REPORT_TYPE = {\n\t\tACCELEROMETER_1:0, \t//AXL362\n\t\tACCELEROMETER_2:1, \t//ADXL362\n\t\tMAGNETOMETER:2,\t\t//BMM150\t\n\t\tTEMP:3,\t\t\t\t//ADT7410\n\t\tMIC:4,\t\t\t//IM69D130\n\t\t//ACCELEROMETER_3:5,\t//ADXL1002\n\t};\n\t\n\t\n\tif (Buffer.isBuffer(binaryData) == false){\n\t\tconsole.log(\"Not a buffer\");\n\t\treturn null;\n\t}\n\t//Binary data\n\tthis.binaryData = binaryData;\n\t\n\t\n\tthis.messageTypeGet = function() {\n\t\tswitch (binaryData[0]){\n\t\t\t//Report\n\t\t\tcase MESSAGE_TYPE.REPORT:\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t\treturn this.binaryData[0];\n\t}\n\tthis.reportTypeGet = function() {\n\t\treturn this.binaryData[1];\n\t}\n\t\n\t//Reports\n\tthis.isReportMessage = function() {\n\t\treturn (this.messageTypeGet()==MESSAGE_TYPE.REPORT);\n\t}\n\tthis.timestampGet = function() {\n\t\tif ((binaryData.length < 10) && (this.isReportMessage()==true))\n\t\t\treturn null;\t\t\n\t\t//return this.binaryData.readBigInt64LE(2);\n\t\treturn new Date((Number(this.binaryData.readBigInt64LE(2) ) /32768) * 1000);\n\t\t\n\t}\n\t\n\t\n\t//Reports - Accelerometer 1\t\n\tthis.accelerometer1Get = function() {\n\t\tif ((this.isReportMessage()==false) || (this.reportTypeGet()!=REPORT_TYPE.ACCELEROMETER_1))\n\t\t\treturn null;\n\t\t\n\t\t//Number of samples per axis\n\t\tvar len = \t(binaryData.length - 10) / (3*2);\t\n\t\tvar res = {X:new Float32Array(len),Y:new Float32Array(len),Z:new Float32Array(len)};\n\t\t\n\t\t \n\t\tfor (var i=0; i < len; i++){\n\t\t\tres.X[i] = this.binaryData.readInt16LE(10 + i*6) / 1024;\n\t\t\tres.Y[i] = this.binaryData.readInt16LE(12 + i*6) / 1024;\n\t\t\tres.Z[i] = this.binaryData.readInt16LE(14 + i*6) / 1024;\n\t\t}\n\t\t\n\t\treturn res;\t\t\n\t}\n\t\n\t\n\t//Reports - Accelerometer 2\t\n\tthis.accelerometer2Get = function() {\n\t\tif ((this.isReportMessage()==false) || (this.reportTypeGet()!=REPORT_TYPE.ACCELEROMETER_2))\n\t\t\treturn null;\n\t\t\n\t\t//Total number of samples\n\t\tvar len = \tMath.floor(2 * (binaryData.length - 10) / 3);\t\n\t\tvar tempArr = [new Float32Array(len / 3),new Float32Array(len / 3),new Float32Array(len / 3)];\n\t\t\n\t\tvar payloadIndex = 10;\n\t\tfor (var i=0; i < len ; i = i+2){\n\t\t\t//Get Raw data\n\t\t\ttempArr[i  % 3][Math.floor(i / 3)] = ((this.binaryData[payloadIndex + 1] & 0x0F) << 8) | this.binaryData[payloadIndex];          \n\t\t\ttempArr[(i + 1) % 3][ Math.floor((i+1) / 3)] =  (this.binaryData[payloadIndex + 2] << 4) | (this.binaryData[payloadIndex + 1] >> 4 )\n\t\t\tpayloadIndex = payloadIndex + 3;\n\t\t}\n\t\t\n\t\t//Convert to a/g\t\t\n\t\tfor (var j=0; j < tempArr.length ; j++){\n\t\t\tfor (var i=0; i < tempArr[0].length ; i++){\n\t\t\t\ttempArr[j][i] = (tempArr[j][i] - 2048) * 1.8  / (4096 * 0.08) ;\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn {X:tempArr[0], Y:tempArr[1], Z:tempArr[2]};\n\t}\n\t\n\t//Reports - Magnetometer\n\tthis.magnetometerGet = function() {\n\t\tif ((this.isReportMessage()==false) || (this.reportTypeGet()!=REPORT_TYPE.MAGNETOMETER))\n\t\t\treturn null;\n\t\t\n\t\tvar len = \tMath.floor( (binaryData.length - 10) / 2);\t\t\t\n\t\tvar tempArr = [new Int32Array(len / 3),new Int32Array(len / 3),new Int32Array(len / 3)];\n\t\t\n\t\tfor (var i=0; i < len  ; i++){\n\t\t\ttempArr[i  % 3][Math.floor(i / 3)] = 1000* this.binaryData.readInt16LE(10 + i*2) / 16;\t\t\t\t\t\t\n\t\t}\n\t\t\n\t\treturn {X:tempArr[0], Y:tempArr[1], Z:tempArr[2]};\n\t\t\n\t\t\n\t}\n\t\n\t\n\t//Reports - Temperature\n\tthis.temperatureGet = function() {\n\t\tif ((this.isReportMessage()==false) || (this.reportTypeGet()!=REPORT_TYPE.TEMP))\n\t\t\treturn null;\t\t\n\t\treturn this.binaryData.readInt16LE(10)/128;\n\t}\n\t\n\t\n\t//Reports - MIC\n\tthis.micGet = function() {\n\t\tif ((this.isReportMessage()==false) || (this.reportTypeGet()!=REPORT_TYPE.MIC))\n\t\t\treturn null;\t\t\n\t\t\n\t\tvar len = \tMath.floor( (binaryData.length - 10) / 2);\t\t\t\n\t\tvar res =  new Float32Array(len);\n\t\t\n\t\tfor (var i=0; i < len  ; i++){\n\t\t\tres[i] = this.binaryData.readInt16LE(10 + i*2) * Math.pow(10, (130/20))/32768;\t\t\t\t\t\t\n\t\t}\n\t\t\n\t\treturn res;\n\t}\n\t\n  \n\t\n\t\n\t\n\t//Get parsed object\n\tthis.objectGet = function() {\n\t\tvar res = {};\n\t\t\n\t\t//Parse only message type\n\t\tif (this.messageTypeGet() == null)\n\t\t\treturn null;\n\t\t\n\t\tswitch (this.messageTypeGet()){\n\t\t\tcase MESSAGE_TYPE.REPORT:\n\t\t\t\tres.type = \"Report\";\n\t\t\t\tres.timestamp = this.timestampGet();\n\t\t\t\tswitch (this.reportTypeGet()){\n\t\t\t\t\tcase REPORT_TYPE.ACCELEROMETER_1:\n\t\t\t\t\t\tres.reportType = \"ACC1\";\n\t\t\t\t\t\tres[res.reportType] = this.accelerometer1Get();\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase REPORT_TYPE.ACCELEROMETER_2:\n\t\t\t\t\t\tres.reportType = \"ACC2\";\n\t\t\t\t\t\tres[res.reportType] = this.accelerometer2Get();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase REPORT_TYPE.MAGNETOMETER:\n\t\t\t\t\t\tres.reportType = \"MAG\";\n\t\t\t\t\t\tres[res.reportType] = this.magnetometerGet();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase REPORT_TYPE.TEMP:\n\t\t\t\t\t\tres.reportType = \"Temp\";\n\t\t\t\t\t\tres[res.reportType] = this.temperatureGet();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase REPORT_TYPE.MIC:\n\t\t\t\t\t\tres.reportType = \"MIC\";\n\t\t\t\t\t\tres[res.reportType] = this.micGet();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t\treturn res;\n\t}\n}\n)\n","finalize":"","x":340,"y":240,"wires":[["8eadd70d.fdc248"]]},{"id":"d06c3515.0071e8","type":"mqtt-broker","z":"","name":"LocalHost","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""}]